name: Release

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/test.yaml
      - parcellab/**
      - "!**.md"
  workflow_dispatch:

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      charts: ${{ steps.generate-matrix.outputs.charts }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Load repos configuration file
        id: generate-matrix
        run: |
          export CHARTS=$(ls -d parcellab/* | awk ' BEGIN { ORS = ""; print "["; } { print "\/\@"$0"\/\@"; } END { print "]"; }' | sed "s^\"^\\\\\"^g;s^\/\@\/\@^\", \"^g;s^\/\@^\"^g")
          echo "::set-output name=charts::$CHARTS"
  test:
    needs: matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chart: ${{ fromJSON(needs.matrix.outputs.charts) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Update dependencies
        run: helm dependency update ${{ matrix.chart }}
      - name: Lint chart
        run: helm lint ${{ matrix.chart }}
      - name: Template chart
        run: |
          helm show chart ${{ matrix.chart }} | grep "type: library" || helm template ${{ matrix.chart }} > output.yaml
      - if: matrix.chart != 'parcellab/common'
        name: Evaluate k8s resources
        uses: instrumenta/kubeval-action@master
        with:
          files: output.yaml
      - name: Check for chart version changes
        id: check_version_changes
        run: |
          CHANGED_CHARTS=()
          for chart in ${{ matrix.chart }}; do
            if [ -d "$chart" ]; then
              CURRENT_VERSION=$(yq e '.version' "$chart/Chart.yaml")
              PREVIOUS_VERSION=$(git show HEAD~1:"$chart/Chart.yaml" 2>/dev/null | yq e '.version' - || echo "")
              if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
                echo "New version $CURRENT_VERSION detected in $chart"
                CHANGED_CHARTS+=("\"$chart\"")
              fi
            fi
          done
          CHANGED_CHARTS_JSON=$(printf '[%s]' "$(IFS=,; echo "${CHANGED_CHARTS[*]}")")
          echo "Changed charts: $CHANGED_CHARTS_JSON"
          echo "::set-output name=changed_charts::$CHANGED_CHARTS_JSON"
    outputs:
      changed_charts: ${{ steps.check_version_changes.outputs.changed_charts }}
  release:
    if: github.ref == 'refs/heads/main' && needs.test.outputs.changed_charts != '[]'
    needs: test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        chart: ${{ fromJSON(needs.test.outputs.changed_charts) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
      - name: Run chart-releaser
        run: |
          for chart in ${{ fromJSON(needs.test.outputs.changed_charts) }}; do
            echo "Releasing $chart..."
            # Extract the chart name without the path
            CHART_NAME=$(basename $chart)
            # Determine the current version of the chart
            CURRENT_VERSION=$(yq e '.version' "$chart/Chart.yaml")
            # Determine the last released version of the chart
            LAST_RELEASED_TAG=$(git describe --tags --match "$CHART_NAME-*" --abbrev=0 2>/dev/null || echo "")
            echo "Discovering changed charts since '$LAST_RELEASED_TAG'..."
            if [ -z "$LAST_RELEASED_TAG" ] || [ "$LAST_RELEASED_TAG" != "$CHART_NAME-$CURRENT_VERSION" ]; then
              # Run the chart-releaser-action or your custom release logic here
              echo "Releasing $CHART_NAME version $CURRENT_VERSION..."
              # ... your release commands ...
            else
              echo "No changes detected for $CHART_NAME since last release."
            fi
          done
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
