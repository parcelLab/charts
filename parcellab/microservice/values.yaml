env: prod # The application environment

name: app # The application name

orgRepository: ghcr.io/parcellab # The organization docker repository

##
## Service
##

service:
  name: http
  port: 80
  targetPort: http
  protocol: TCP
  type: ClusterIP

revisionHistoryLimit: 0

##
## Ingress
##

ingress:
  enabled: false
  className: "nginx"
  annotations:
    # kubernetes.io/tls-acme: "true"
  hosts:
    []
    # - host: app
    #   paths:
    #     - path: /
    #       pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

##
## Cronjob
##

cronjob:
  enabled: false
  concurrencyPolicy: "Allow"
  failedJobsHistoryLimit: 1
  schedule: "* * * * *"
  successfulJobsHistoryLimit: 3
  suspend: false
  #   command:
  #   - /bin/sh
  #   - -c
  #   - date; echo Hello from the Kubernetes cluster

##
## Configuration
##

# Create a configmap whose attributes will be loaded to the container as
# environment variables using the values defined here
config: {}

# Create a secret whose attributes will be loaded to the container as
# environment variables using the external-secrets project and an already
# configured secret store reference
# See https://external-secrets.io/latest/spec/#external-secrets.io/v1beta1.ExternalSecretSpec
externalSecret:
  {}
  # dataFrom:
  #   - extract:
  #       key: app-key-in-secrets-manager

# Enable Argo Rollouts Deployments Strategies
# See https://argo-rollouts.readthedocs.io/en/stable/
argoRollout:
  enabled: false

  # Argo Rollouts Notifications Configuration
  # This section allows you to configure notifications for various Argo Rollouts events by specifying triggers.
  # Each trigger  corresponds to a specific event in the rollout or analysis process, and you can define actions
  # (like sending notifications) for each event. Below is a list of available triggers and a brief description
  # of when they are activated. You can specify one or more actions for each trigger, such as sending notifications
  # to different channels or endpoints.

  # List of Triggers and Descriptions:
  # trigger.on-analysis-run-error: Triggered when an analysis run encounters an error.
  # trigger.on-analysis-run-failed: Triggered when an analysis run fails.
  # trigger.on-analysis-run-running: Triggered when an analysis run is currently running.
  # trigger.on-rollout-aborted: Triggered when a rollout is aborted.
  # trigger.on-rollout-completed: Triggered when a rollout is successfully completed.
  # trigger.on-rollout-paused: Triggered when a rollout is paused.
  # trigger.on-rollout-step-completed: Triggered when a step in the rollout process is completed.
  # trigger.on-rollout-updated: Triggered when a rollout is updated (e.g., a new revision is deployed).
  # trigger.on-scaling-replica-set: Triggered when the replica set is being scaled.
  # Example configuration:

  # notifications:
  #   triggers:
  #     - name: on-rollout-step-completed  # Trigger name for when a rollout step is completed.
  #       channels:                       # List of Slack channels to notify for this trigger.
  #         - my-channel1                 # Each channel is specified by its name.
  #         - my-channel2
  #     - name: on-rollout-updated        # Another trigger for when a rollout is updated.
  #       channels:
  #         - my-channel3                 # For this trigger, notifications go to a different channel.
  #
  # To add more triggers, follow the same structure: specify the trigger name and associated channels.
  notifications:
    triggers: []

#  ## Canary deployment example with analysis
#  canary:
#    steps:
#      - setWeight: 20
#      - pause: { duration: 10m }
#      - setWeight: 40
#      - pause: { duration: 10m }
#      - setWeight: 60
#      - pause: { duration: 10m }
#      - setWeight: 80
#      - pause: { duration: 10m }
#  canaryMetrics:
#    - name: service-error-rate
#      interval: 5m
#      successCondition: result <= 0.01
#      failureLimit: 3
#      provider:
#        datadog:
#          apiVersion: v2
#          interval: 5m
#          query: |
#            sum:requests.error.rate{service:{{args.service-name}}}
#
#
#  ## BlueGreen deployment with Analysis template.
#  blueGreen:
#    autoPromotionEnabled: false
#  blueGreenMetricsPrePromotion: # optional
#  - name: smoke-tests
#    interval: 5m
#    successCondition: result >= 0.01
#    failureLimit: 3
#    provider:
#      datadog:
#        apiVersion: v2
#        interval: 5m
#        query: |
#          sum:requests.success.rate{service:app}
#  blueGreenMetricsPostPromotion: # optional
#  - name: error-rate
#    interval: 5m
#    successCondition: result <= 0.01
#    failureLimit: 3
#    provider:
#      datadog:
#        apiVersion: v2
#        interval: 5m
#        query: |
#          sum:requests.error.rate{service:app}

##
## Autoscaling
##

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

podDisruptionBudget:
  enabled: false
  spec:
    maxUnavailable: "50%"

vpa:
  enabled: false

##
## Pod
##

affinity: {}

datadog:
  enabled: true

imagePullSecrets:
  - name: github-docker

terminationGracePeriodSeconds: 30

nodeSelector: {}

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

replicaCount: 1

strategy:
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

tolerations: []

volumes: []

##
## Container
##

command:
# - /bin/sh
# - -c
# - date; echo Hello from the Kubernetes cluster

image:
  # repository: nginx  # Will apply if orgRepository and name is not defined
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: stable

containerEnv: []
# - name: MY_ENV_VAR
#   value: "myvalue"

podSecurityContext:
  {}
  # fsGroup: 2000

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 50m
    memory: 64Mi
# livenessProbe:
#   httpGet:
#     path: /
#     port: http

# readinessProbe:
#   httpGet:
#     path: /
#     port: http

##
## Postgresql
##

postgresql:
  enabled: false
  # See default values: https://artifacthub.io/packages/helm/bitnami/postgresql?modal=values

##
## Redis
##

redis:
  enabled: false
  # See default values: https://artifacthub.io/packages/helm/bitnami/redis?modal=values

#  these containers share secrets, configmaps, volumes and environment variables from the settings above
initContainers: []
#  - name: myInitContainer1
#    image:
#      url: ghcr.io/parcellab/image
#      pullPolicy: Never
#      tag: commitTag
#    ports:
#      - name: http
#        containerPort: 80
#        protocol: TCP
#    env:
#      - name: foo
#        value: "bar"
#    resources:
#      limits:
#        cpu: 10m
#        memory: 12Mi
#      requests:
#        cpu: 3m
#        memory: 12Mi
#    podSecurityContext:
#      fsGroup: 2000
#    config:
#      MY_INIT_VALUE: bar
#    externalSecret:
#      dataFrom:
#        - extract:
#            key: app-key-in-secrets-manager

# sidecars configuration is identical to initContainers
extraContainers: []
