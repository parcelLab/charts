env: prod # The application environment

name: worker-group # The application name

orgRepository: ghcr.io/parcellab # The organization docker repository

##
## Configuration
##

revisionHistoryLimit: 0

# Create a configmap whose attributes will be loaded to the container as
# environment variables using the values defined here
config: {}

# Create a secret whose attributes will be loaded to the container as
# environment variables using the external-secrets project and an already
# configured secret store reference
# See https://external-secrets.io/latest/spec/#external-secrets.io/v1beta1.ExternalSecretSpec
externalSecret:
  {}
  # dataFrom:
  #   - extract:
  #       key: app-key-in-secrets-manager

# Enable Argo Rollouts Deployments Strategies
# See https://argo-rollouts.readthedocs.io/en/stable/
rolloutDeployment:
  enabled: false
  ## BlueGreen deployment example
  # blueGreen:
  #   autoPromotionEnabled: false

  ## Canary deployment example
  # canary:
  #   maxSurge: "25%"
  #   maxUnavailable: 0
  #   steps:
  #   - setWeight: 10
  #   - pause:
  #       duration: 1h
  #   - setWeight: 20
  #   - pause: {}

  ## BlueGreen deployment with Analysis template.
  # blueGreen:
  #   metrics:
  #   - name: smoke-tests
  #     interval: 5m
  #     successCondition: result <= 0.01
  #     failureLimit: 3
  #     provider:
  #       datadog:
  #         apiVersion: v2
  #         interval: 5m
  #         query: |
  #           sum:requests.error.rate{service:app}
  #   spec:
  #     prePromotionAnalysis:
  #       templates:
  #       - templateName: smoke-tests-analysis
  #       args:
  #       - name: service-name
  #         value: preview-svc.default.svc.cluster.local

##
## Autoscaling
##

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

podDisruptionBudget:
  enabled: false
  spec:
    maxUnavailable: "50%"

vpa:
  enabled: false

##
## Pod
##

affinity: {}

datadog:
  enabled: true

imagePullSecrets:
  - name: github-docker

terminationGracePeriodSeconds: 30

nodeSelector: {}

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

replicaCount: 1
disableReplicaCount: false

strategy:
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

tolerations: []

volumes: []

##
## Container
##

command:
# - /bin/sh
# - -c
# - date; echo Hello from the Kubernetes cluster

image:
  # repository: nginx  # Will apply if orgRepository and name is not defined
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: stable

containerEnv: []
# - name: MY_ENV_VAR
#   value: "myvalue"

podSecurityContext:
  {}
  # fsGroup: 2000

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 50m
    memory: 64Mi
# livenessProbe:
#   httpGet:
#     path: /
#     port: http

# readinessProbe:
#   httpGet:
#     path: /
#     port: http

##
## Workers
##

# If empty list is given, no deployments will be created
workers: []
# - name: myworker
#   command:
#   - /bin/sh
#   - -c
#   - date; echo Hello from the Kubernetes cluster
#   strategy:
#     type: RollingUpdate
#     rollingUpdate:
#       maxSurge: 25%
#       maxUnavailable: 25%
#   portNumber: 3000
#   livenessProbe:
#     httpGet:
#       path: /
#       port: http
#   readinessProbe:
#     httpGet:
#       path: /
#       port: http
#   resources:
#     limits:
#       cpu: 100m
#       memory: 128Mi
#     requests:
#       cpu: 50m
#       memory: 64Mi
#   containerEnv: []
#   - name: MY_ENV_VAR
#     value: "myvalue"

##
## Service
##

service:
  name: http
  port: 80
  targetPort: http
  protocol: TCP
  type: ClusterIP

##
## Ingress
##

ingress:
  enabled: false
  className: "nginx"
  annotations:
    # kubernetes.io/tls-acme: "true"
  hosts:
    []
    # - host: app
    #   paths:
    #     - path: /
    #       pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
